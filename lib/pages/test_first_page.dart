import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../pages/PrivacyConsentPage.dart';

class TestFirstPage extends StatefulWidget {
  @override
  _TestFirstPageState createState() => _TestFirstPageState();
}

class _TestFirstPageState extends State<TestFirstPage> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController rrnController = TextEditingController();
  bool _isHidden = true;
  String _rrnRaw = '';

  void submitInfo() async {
    print('‚úÖ [submitInfo] Ìï®Ïàò Ìò∏Ï∂úÎê®');

    final name = nameController.text.trim();
    final rrn = _rrnRaw;
    print('üì® ÏûÖÎ†• Î∞õÏùÄ name: $name / rrn: $rrn');

    if (name.isEmpty || rrn.length != 13) {
      print('‚ö†Ô∏è ÏûÖÎ†•Í∞í Î∂ÄÏ°±: name ÎòêÎäî Ï£ºÎØºÎ≤àÌò∏Í∞Ä ÎπÑÏñ¥ ÏûàÏùå');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Ïù¥Î¶ÑÍ≥º Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏(13ÏûêÎ¶¨)Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")),
      );
      return;
    }

    try {
      final uri = Uri.http(
        '10.30.122.19:3000',
        '/test/getTestBySsn',
        {'name': name, 'ssn': rrn},
      );
      print('üåê [ÏöîÏ≤≠ Ï†ÑÏÜ°] GET $uri');

      final response = await http.get(uri);
      print('üì¨ [ÏùëÎãµ ÎèÑÏ∞©] ÏÉÅÌÉúÏΩîÎìú: ${response.statusCode}');
      print('üì¶ [ÏùëÎãµ ÎÇ¥Ïö©] ${response.body}');

      if (response.statusCode == 200) {
        final List responseData = jsonDecode(response.body);

        if (responseData.isEmpty) {
          print('‚ö†Ô∏è Í≤ÄÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Í≤ÄÏÇ¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.')),
          );
          return;
        }

        final test = responseData.first;
        final testId = test['id'];
        final childId = test['childid'];
        print('‚úÖ Í≤ÄÏÇ¨ ÏûàÏùå ‚Üí testId: $testId, childId: $childId');

        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PrivacyConsentPage(
              testId: testId,
              childId: childId,
            ),
          ),
        );
      } else {
        final error = jsonDecode(response.body);
        print('‚ö†Ô∏è Í≤ÄÏÇ¨ ÏóÜÏùå ÎòêÎäî ÏÑúÎ≤Ñ Ïò§Î•ò');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(error['error'] ?? 'Í≤ÄÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')),
        );
      }
    } catch (e) {
      print('üõë ÏòàÏô∏ Î∞úÏÉù: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ÏÑúÎ≤ÑÏôÄ ÌÜµÏã†Ìï† Ïàò ÏóÜÏäµÎãàÎã§.')),
      );
    }
  }

  void _onRrnChanged(String input) {
    final digits = input.replaceAll(RegExp(r'[^0-9]'), '');
    if (digits.length > 13) return;

    setState(() {
      _rrnRaw = digits;
      rrnController.text = digits;
      rrnController.selection = TextSelection.fromPosition(
        TextPosition(offset: rrnController.text.length),
      );
    });
  }

  void _toggleVisibility() {
    setState(() {
      _isHidden = !_isHidden;
      rrnController.selection = TextSelection.fromPosition(
        TextPosition(offset: rrnController.text.length),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: Container(
        width: double.infinity,
        height: double.infinity,
        decoration: const BoxDecoration(
          image: DecorationImage(
            image: AssetImage('assets/login.png'),
            fit: BoxFit.cover,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(40, 100, 40, 40), // ‚¨Ö ÏúÑÎ°úÎ∂ÄÌÑ∞ 100ÎßåÌÅº ÎÇ¥Î†§ÏÑú Ï†ÑÏ≤¥ ÏúÑÏπò Ï°∞Ï†ï
            child: ConstrainedBox(
              constraints: const BoxConstraints(maxWidth: 300),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const SizedBox(height: 6),
                  const Text(
                    'ÌîºÍ≤ÄÏÇ¨Ïûê Ï†ïÎ≥¥ ÏûÖÎ†•',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.w400),
                  ),
                  const SizedBox(height: 30),
                  _buildTextField(controller: nameController, hint: 'Ïù¥Î¶Ñ'),
                  const SizedBox(height: 12),
                  TextField(
                    controller: rrnController,
                    keyboardType: TextInputType.number,
                    maxLength: 13,
                    obscureText: _isHidden,
                    obscuringCharacter: '‚Ä¢',
                    onChanged: _onRrnChanged,
                    decoration: InputDecoration(
                      hintText: 'Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏ (13ÏûêÎ¶¨)',
                      counterText: '',
                      filled: true,
                      fillColor: Colors.white,
                      contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 20),
                      suffixIcon: IconButton(
                        icon: Icon(
                          _isHidden ? Icons.visibility_off : Icons.visibility,
                          color: Colors.grey,
                        ),
                        onPressed: _toggleVisibility,
                      ),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(30),
                        borderSide: const BorderSide(color: Colors.orange),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(30),
                        borderSide: const BorderSide(color: Colors.orange),
                      ),
                    ),
                  ),
                  const SizedBox(height: 30),
                  SizedBox(
                    height: 44,
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: submitInfo,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(30),
                        ),
                      ),
                      child: const Text("Î°úÍ∑∏Ïù∏", style: TextStyle(fontSize: 15)),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hint,
  }) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        hintText: hint,
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(vertical: 14, horizontal: 20),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: const BorderSide(color: Colors.orange),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: const BorderSide(color: Colors.orange),
        ),
      ),
    );
  }
}
